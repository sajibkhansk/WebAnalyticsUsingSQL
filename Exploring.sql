-- Set as a default database
use mavenfuzzyfactory;

-- Exploring Seccion id = 1059
SELECT 
    *
FROM
    website_sessions
WHERE
    website_session_id = 1059;
  
-- Exploring session id = 1059s footprint
SELECT 
    *
FROM
    website_pageviews
WHERE
    website_session_id = 1059;
    
-- What he orderd in a particular scession

SELECT 
    *
FROM
    ORDERS
WHERE
    website_session_ID = 1059;

-- From Which content customer engage more
-- Calculte Session, total_orders with CVR by grouping UTM_Content

SELECT 
    W.utm_content,
    COUNT(DISTINCT W.website_session_id) AS SESSIONS,
    COUNT(DISTINCT O.ORDER_ID) AS TOTAL_ORDERS,
    COUNT(DISTINCT O.ORDER_ID) / COUNT(DISTINCT W.website_session_id) AS CVR
FROM
    website_sessions W
        LEFT JOIN
    ORDERS O ON W.website_session_id = O.website_session_id
WHERE
    W.website_session_id BETWEEN 1000 AND 2000
GROUP BY UTM_CONTENT
ORDER BY SESSIONS DESC;

-- Where the bulk of our website sessions are coming from through yesterday
-- Break donw of UTM_SOURCE, CAMPAIGN and Referring Domain

SELECT 
    UTM_SOURCE,
    UTM_CAMPAIGN,
    HTTP_REFERER,
    COUNT(WEBSITE_SESSION_ID)
FROM
    WEBSITE_SESSIONS
WHERE
    CREATED_AT < '2012-04-12'
GROUP BY 1 , 2 , 3;

-- CALCULATE CVR FROM SESSION TO ORDER only from (gsearch, nonbrand)

SELECT 
    COUNT(DISTINCT W.WEBSITE_SESSION_ID) AS SESSIONS,
    COUNT(DISTINCT O.ORDER_ID) AS ORDERS,
    COUNT(DISTINCT O.ORDER_ID) / COUNT(DISTINCT W.WEBSITE_SESSION_ID) AS CVR
FROM
    WEBSITE_SESSIONS W
        LEFT JOIN
    ORDERS O ON W.WEBSITE_SESSION_ID = O.WEBSITE_SESSION_ID
WHERE
    W.CREATED_AT < '2012-04-14'
        AND UTM_SOURCE = 'gsearch'
        AND UTM_CAMPAIGN = 'nonbrand';

-- Weekly Trend Analysis of Sessions
SELECT 
    YEAR(created_at),
    WEEK(CREATED_AT),
    MIN(DATE(created_at)) AS STARTOFWEEK,
    COUNT(DISTINCT WEBSITE_SESSION_ID)
FROM
    website_sessions
WHERE
    website_session_id BETWEEN 100000 AND 115000
GROUP BY 1 , 2;

-- Pivoting

SELECT 
    PRIMARY_PRODUCT_ID,
    COUNT(DISTINCT CASE
            WHEN ITEMS_PURCHASED = 1 THEN ORDER_ID
            ELSE NULL
        END) AS SINGLE_ITEM_ORDERS,
    COUNT(DISTINCT CASE
            WHEN ITEMS_PURCHASED = 2 THEN ORDER_ID
            ELSE NULL
        END) AS MULTI_ITEMS_ORDERS,
    COUNT(DISTINCT ORDER_ID) AS TOTAL_ORDERS
FROM
    ORDERS
WHERE
    ORDER_ID BETWEEN 31000 AND 32000
GROUP BY 1;

-- Bid down (gsearch-nonbrand)

SELECT 
    MIN(DATE(CREATED_AT)) AS START_OF_WEEK,
    COUNT(WEBSITE_SESSION_ID)
FROM
    WEBSITE_SESSIONS
WHERE
    CREATED_AT < '2012-05-10'
        AND UTM_SOURCE = 'gsearch'
        AND UTM_CAMPAIGN = 'nonbrand'
GROUP BY YEAR(CREATED_AT) , WEEK(CREATED_AT)
;

-- DEVICE TYPE WISE CONVERSION RATE

SELECT 
    W.DEVICE_TYPE,
    COUNT(DISTINCT W.WEBSITE_SESSION_ID) AS SESSIONS,
    COUNT(DISTINCT O.ORDER_ID) AS ORDERS,
    COUNT(DISTINCT O.ORDER_ID) / COUNT(DISTINCT W.WEBSITE_SESSION_ID) AS CVR
FROM
    website_SESSIONS W
        LEFT JOIN
    ORDERS O ON W.WEBSITE_SESSION_ID = O.WEBSITE_SESSION_ID
WHERE
    W.CREATED_AT < '2012-05-11'
        AND UTM_SOURCE = 'gsearch'
        AND UTM_CAMPAIGN = 'nonbrand'
GROUP BY 1;

-- PIVOTING DESKTP VS MOBILE 'SESSION BY START OF WEEK'
SELECT 
    MIN(DATE(CREATED_AT)) AS START_OF_WEEK,
    COUNT(CASE
        WHEN DEVICE_TYPE = 'Desktop' THEN WEBSITE_SESSION_ID
        ELSE NULL
    END) AS DESK_SESSION,
    COUNT(CASE
        WHEN DEVICE_TYPE = 'Mobile' THEN WEBSITE_SESSION_ID
        ELSE NULL
    END) AS MOB_SESSION
FROM
    website_sessions
WHERE
    CREATED_AT < '2012-06-09'
        AND CREATED_AT > '2012-04-15'
        AND UTM_SOURCE = 'gsearch'
        AND UTM_CAMPAIGN = 'nonbrand'
GROUP BY YEAR(CREATED_AT) , WEEK(CREATED_AT);

-- Website Analysis
-- Pagewise Analysis

SELECT 
    PAGEVIEW_URL, COUNT(DISTINCT WEBSITE_PAGEVIEW_ID) AS PVS
FROM
    WEBSITE_PAGEVIEWS
WHERE
    WEBSITE_PAGEVIEW_ID < 1000
GROUP BY 1
ORDER BY 2 DESC;

-- Landing page (TOP Entry Page) 
CREATE TEMPORARY TABLE FIRST_PAGEVIEW
SELECT 
    website_session_ID,
	MIN(website_pageview_ID) AS MIN_PV_ID
FROM
    WEBSITE_PAGEVIEWS
WHERE
    WEBSITE_PAGEVIEW_ID < 1000
    GROUP BY 1;

SELECT * FROM FIRST_PAGEVIEW;

SELECT 
W.PAGEVIEW_URL AS LANDING_PAGE,
COUNT(DISTINCT F.WEBSITE_SESSION_ID) AS SESSION_HITTING_THIS_

FROM FIRST_PAGEVIEW F 
LEFT JOIN WEBSITE_PAGEVIEWS W 
ON F.MIN_PV_ID = W.WEBSITE_PAGEVIEW_ID
GROUP BY 1;

-- MOST VIEWED WEBSITE PAGES
SELECT PAGEVIEW_URL, 
COUNT(DISTINCT WEBSITE_PAGEVIEW_ID) AS SESSION
FROM WEBSITE_PAGEVIEWS
WHERE CREATED_AT < '2012-06-09'
GROUP BY 1
ORDER BY 2 DESC;

-- Top Entry pages
DROP TABLE FIRST_PV_PER_SESSION;
CREATE TEMPORARY TABLE FIRST_PV_PER_SESSION
SELECT 
website_session_id, 
MIN(website_pageview_id) AS FIRST_PV
FROM website_pageviews
WHERE created_at < '2012-06-12'
group by 1;

select * from FIRST_PV_PER_SESSION;
SELECT * FROM WEBSITE_PAGEVIEWS;

SELECT 
W.PAGEVIEW_URL AS LANDING_PAGE,
COUNT(DISTINCT F.website_session_ID) AS 'Session'
FROM FIRST_PV_PER_SESSION F 
LEFT JOIN WEBSITE_PAGEVIEWS W
ON F.FIRST_PV = W.website_pageview_id
GROUP BY 1;

-- Landing page performance and tesing
-- Step1 : find the first website_preview_id for releavant session
-- Step2 : Identify Landing page for each session
-- Step3 : Counting pageviews for each session, to identify 'Bounce'
-- Step4 :  Summarizing tool session and bounce session

-- (FINDING THE MINIMUM WEBSITE PAGEVIEW ID ASSOCIATED WITH EACH SESSION)
SELECT 
WP.website_session_id, 
MIN(WP.website_pageview_id) AS MIN_PAGEVIEW_ID
FROM website_pageviews WP
INNER JOIN WEBSITE_SESSIONS WS
ON WP.website_session_id = WS.website_session_id
WHERE WS.created_at between '2014-01-01' AND '2014-02-01'
group by 1;


DROP TABLE FPVD;

-- (CREATING TEMPORARY TABLE) AS FIRST PAGEVIEW DEMO
CREATE TEMPORARY TABLE FPVD
SELECT 
WP.website_session_id, 
MIN(WP.website_pageview_id) AS MIN_PAGEVIEW_ID
FROM website_pageviews WP
INNER JOIN WEBSITE_SESSIONS WS
ON WP.website_session_id = WS.website_session_id
WHERE WS.created_at between '2014-01-01' AND '2014-02-01'
group by 1;


SELECT * FROM FPVD;
-- CONNECTING LANDING PAGE
SELECT
FP.website_session_ID,
W.PAGEVIEW_URL AS LANDING_PAGE
FROM FPVD FP
LEFT JOIN WEBSITE_PAGEVIEWS W 
	ON FP.MIN_PAGEVIEW_ID = W. WEBSITE_PAGEVIEW_ID;
    
DROP TABLE SESSION_W_LANDING_PAGE_DEMO;
-- CREATING TEMP TABLE OF COPY OF SESSION WITH LANDING PAGE
CREATE TEMPORARY TABLE SESSION_W_LANDING_PAGE_DEMO
SELECT
FP.website_session_ID,
W.PAGEVIEW_URL AS LANDING_PAGE
FROM FPVD FP
LEFT JOIN WEBSITE_PAGEVIEWS W 
	ON FP.MIN_PAGEVIEW_ID = W. WEBSITE_PAGEVIEW_ID;
SELECT * FROM SESSION_W_LANDING_PAGE_DEMO;


-- HOW MANY TOTAL PAGEVIEWS IN THAT SESSION  
  
-- COUNT ONLY BOUNCE
CREATE TEMPORARY TABLE BOUNCE_SESSION_ONLY
SELECT 
S.WEBSITE_SESSION_ID,
S.LANDING_PAGE,
COUNT(W.WEBSITE_PAGEVIEW_ID) AS COUNT_OF_PAGEVIEWED
FROM SESSION_W_LANDING_PAGE_DEMO S
LEFT JOIN WEBSITE_PAGEVIEWS W
ON S.WEBSITE_SESSION_ID = W.WEBSITE_SESSION_ID
GROUP BY 1, 2
HAVING COUNT_OF_PAGEVIEWED =1;

SELECT * FROM BOUNCE_SESSION_ONLY;


-- FINAL OUTPUT
SELECT
S.LANDING_PAGE,
COUNT(distinct S.website_session_ID) AS 'SESSION',
COUNT(DISTINCT B.WEBSITE_SESSION_ID) AS BOUNCE_SESSION,
COUNT(DISTINCT B.WEBSITE_SESSION_ID) / COUNT(distinct S.website_session_ID) AS BOUNCE_RATE 
FROM SESSION_W_LANDING_PAGE_DEMO S
LEFT JOIN BOUNCE_SESSION_ONLY B
	ON B.WEBSITE_SESSION_ID = S. WEBSITE_SESSION_ID
GROUP BY 1;

-- Calculate bounce rate for landing page
CREATE TEMPORARY TABLE FIRST_PAGEVIEWS
SELECT 
WEBSITE_SESSION_ID, 
MIN(WEBSITE_PAGEVIEW_ID) AS MIN_PAGEVIEW_ID
FROM 
WEBSITE_PAGEVIEWS
WHERE CREATED_AT < '2012-06-14'
GROUP BY 1;
create temporary table session_w_home_landing_page
SELECT F.website_session_id,
W.PAGEVIEW_URL AS LANDING_PAGE
FROM FIRST_PAGEVIEWS F
LEFT JOIN website_pageviews W
ON F.MIN_PAGEVIEW_ID = W.WEBSITE_PAGEVIEW_ID
WHERE W.PAGEVIEW_URL = '/home'
order by 1 desc;

select * from session_w_home_landing_page;

DROP TABLE BOUNCE_SESSIOSN;

CREATE TEMPORARY TABLE BOUNCE_SESSION
SELECT 
S.WEBSITE_SESSION_ID, 
S.LANDING_PAGE,
COUNT(W.WEBSITE_PAGEVIEW_ID) AS COUNT_OF_PAGES_VIEWED
FROM session_w_home_landing_page S
LEFT JOIN WEBSITE_PAGEVIEWS W
ON  S.WEBSITE_SESSION_ID = W.WEBSITE_SESSION_ID
GROUP BY 1, 2
HAVING COUNT_OF_PAGES_VIEWED = 1;

SELECT 
COUNT(DISTINCT S.WEBSITE_SESSION_ID) AS SESSION,
COUNT(DISTINCT B.WEBSITE_SESSION_ID) AS BOUNCE_SESSION,
COUNT(DISTINCT B.WEBSITE_SESSION_ID)/COUNT(DISTINCT S.WEBSITE_SESSION_ID) AS BOUNCE_RATE
FROM session_w_home_landing_page S
LEFT JOIN BOUNCE_SESSION B
ON B.WEBSITE_SESSION_ID = S.WEBSITE_SESSION_ID;

-- Funnel Analysis
-- BUSINESS CONTEXT
-- we want to build a mini conversion fannel, from / Lander-2 to /cart
-- we want to know how many people reach each step, and also dropoff rates
-- for simplicity of the demo, we're looking at /lander-2 traffic only
-- for simplicity of the demo, we're lookign at customers who like Mr Fuzzy only You sent


-- STEP 1: select all pageviews for relevant sessions
-- STEP 2: identify each relevant pageview as the specific funnel step
-- STEP 3: create the session-level conversion funnel view
-- STEP 4: aggregate the data to assess funnel performance

-- first I will show you all of the pageviews we care about
-- then, I will remove the comments from my flag columns one by one to show you what that

SELECT 
 S.WEBSITE_SESSION_ID, 
 P.PAGEVIEW_URL,
 P.CREATED_AT AS PAGEVIWE_CREATED_AT,
 CASE WHEN PAGEVIEW_URL = '/products' THEN 1 ELSE 0 END AS PRODUCT_PAGE,
 CASE WHEN PAGEVIEW_URL = '/the-original-mr-fuzzy'THEN 1 ELSE 0 END MRFUZZY_PAGE,
CASE WHEN PAGEVIEW_URL = '/cart'  THEN 1 ELSE 0 END AS CART_PAGE
 
 FROM WEBSITE_SESSIONS S
   LEFT JOIN WEBSITE_PAGEVIEWS P 
   ON S.WEBSITE_SESSION_ID = P.WEBSITE_SESSION_ID
WHERE S.CREATED_AT BETWEEN '2014-01-01' AND '2014-02-01'
AND P.PAGEVIEW_URL IN ('/lander-2', '/products', '/the-original-mr-fuzzy', '/cart' )
ORDER BY S.WEBSITE_SESSION_ID, P.CREATED_AT;


-- next we will put the previous query inside a subquery (similar to temporary tables)
-- we will group by website_session_id, and take the MAX() of each of the flags
-- this MAX() becomes a made_it flag for that session, to show the session made it there



 -- TURN IT TO TEMP TABLE
CREATE TEMPORARY TABLE SESSION_LEVEL_MADE_IT_FLAGS_DEMO
SELECT 
WEBSITE_SESSION_ID,
MAX(PRODUCT_PAGE) AS PRODUCT_MADE_IT,
MAX(MRFUZZY_PAGE) AS MRFUZZY_MADE_IT,
MAX(CART_PAGE) AS CART_MADE_IT
FROM (
SELECT 
 S.WEBSITE_SESSION_ID, 
 P.PAGEVIEW_URL,
 P.CREATED_AT AS PAGEVIWE_CREATED_AT,
 CASE WHEN PAGEVIEW_URL = '/products' THEN 1 ELSE 0 END AS PRODUCT_PAGE,
 CASE WHEN PAGEVIEW_URL = '/the-original-mr-fuzzy'THEN 1 ELSE 0 END MRFUZZY_PAGE,
CASE WHEN PAGEVIEW_URL = '/cart'  THEN 1 ELSE 0 END AS CART_PAGE
 
 FROM WEBSITE_SESSIONS S
   LEFT JOIN WEBSITE_PAGEVIEWS P 
   ON S.WEBSITE_SESSION_ID = P.WEBSITE_SESSION_ID
WHERE S.CREATED_AT BETWEEN '2014-01-01' AND '2014-02-01'
AND P.PAGEVIEW_URL IN ('/lander-2', '/products', '/the-original-mr-fuzzy', '/cart' )
ORDER BY S.WEBSITE_SESSION_ID, P.CREATED_AT
) AS PREVIEW_LEVEL
GROUP BY 
WEBSITE_SESSION_ID;

SELECT * FROM SESSION_LEVEL_MADE_IT_FLAGS_DEMO;

-- THEN THIS WOULD PRODUCE THE FINAL OUTPUT PART -1

 SELECT 
 COUNT(DISTINCT WEBSITE_SESSION_ID) AS SESSION,
 COUNT(DISTINCT CASE WHEN PRODUCT_MADE_IT = 1 THEN WEBSITE_SESSION_ID ELSE NULL END) AS TO_PRODUCT,
 COUNT(DISTINCT CASE WHEN MRFUZZY_MADE_IT = 1 THEN WEBSITE_SESSION_ID ELSE NULL END) AS TO_MRFUZZY,
 COUNT(DISTINCT CASE WHEN CART_MADE_IT = 1 THEN WEBSITE_SESSION_ID ELSE NULL END) AS TO_CART 
 FROM SESSION_LEVEL_MADE_IT_FLAGS_DEMO;
 
  SELECT 
 COUNT(DISTINCT WEBSITE_SESSION_ID) AS SESSION,
 COUNT(DISTINCT CASE WHEN PRODUCT_MADE_IT = 1 THEN WEBSITE_SESSION_ID ELSE NULL END)
 /COUNT(DISTINCT WEBSITE_SESSION_ID) AS LANDER_CLCICKTHROUGFH_PAGE,
 
 COUNT(DISTINCT CASE WHEN MRFUZZY_MADE_IT = 1 THEN WEBSITE_SESSION_ID ELSE NULL END) 
 /COUNT(DISTINCT CASE WHEN PRODUCT_MADE_IT = 1 THEN WEBSITE_SESSION_ID ELSE NULL END) AS PRODUCT_CLICKTRHOUGH_PAGE,
 
 COUNT(DISTINCT CASE WHEN CART_MADE_IT = 1 THEN WEBSITE_SESSION_ID ELSE NULL END)
 / COUNT(DISTINCT CASE WHEN MRFUZZY_MADE_IT = 1 THEN WEBSITE_SESSION_ID ELSE NULL END) AS MR_FUZZY_CLICKTRHOUGH_RATE 
 FROM SESSION_LEVEL_MADE_IT_FLAGS_DEMO
 

